use Data::Dumper;
use Parallel::ForkManager;

my %randpar;
my %couepar;
my %recupar;
my @dirList;
open(FRA, "randpar.param") or die $!;
open(FCO, "couepar.param") or die $!;
open(FRE, "recupar.param") or die $!;
while(<FRA>) {
    chomp;
    my ($key,$value) = split(' ',$_);
    $randpar{$key} = $value;
}

while(<FCO>) {
    chomp;
    my ($key,$value) = split(' ',$_);
    $couepar{$key} = $value;
}

while(<FRE>) {
    chomp;
    my ($key,$value) = split(' ',$_);
    $recupar{$key} = $value;
}

my $directory = './';
opendir(DIR, $directory) or die $!;
while(my $subdir = readdir(DIR)){
    if($subdir =~ /random(\d)+/){
	push(@dirList,$subdir);
    }
}
@commands;
my $randparstr = join(" ",map { "$_ $randpar{$_}" } keys %randpar);
my $coueparstr = join(" ",map { "$_ $couepar{$_}" } keys %couepar);
my $recuparstr = join(" ",map { "$_ $recupar{$_}" } keys %recupar);

$pm = new Parallel::ForkManager(5);
foreach $randDir (@dirList){
    my $pid = $pm->start and next;
    system("randomfield $randparstr $randDir/random > $randDir/log/rand.log");
    system("couette $coueparstr -o $randDir/data -l2 $randDir/random > $randDir/log/couette.log");
    system("recurrence.x $recuparstr -d $randDir/data -o $randDir/rec > $randDir/log/rec.log");
}

