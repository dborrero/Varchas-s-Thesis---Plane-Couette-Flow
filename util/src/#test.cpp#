

#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <sys/stat.h>


#include "channelflow/utilfuncs.h"
#include "channelflow/flowfield.h"
#include "channelflow/diffops.h"
#include "channelflow/vector.h"

using namespace std;
using namespace channelflow;


int main(int argc, char* argv[]){

  string purpose("compute the recurrence graph of a trajectory (||u(t+T) - u(t)||) and save the data to disk.");

  ArgList args(argc,argv,purpose);

   const Real T0 = args.getreal("-T0","--T0",0.0, "start time");
   const Real T1 = args.getreal("-T1","--T1",100.0, "end time");
   const Real TRec = args.getreal("-TR","--TRec",10.0,"Maximum value of T in u(t+T). Make sure the phase space trajectory has been calculated from u(T0) to u(T1+TRec)");
   const Real dT = args.getreal("-dT","--dT",1.0, "save interval");
   const string outdir = args.getpath("-o","--out","", "output directory");
   const string indir = args.getpath("-d","--data","data/", "directory containing flow fields");
   const string label = args.getstr("-l","--label","u", "input field prefix");
   const string symmstr = args.getstr("-symms","-symmetries","","constrain u(t) to an invariant symmetric subspace, argument is the filename for the generators of the isotropy group");
   const string recname = args.getstr(1,"<flowfield>", "name of outpt file");
   

   args.check();
   args.save("./");
   mkdir(outdir);
   const bool inttime = (abs(dT - int(dT)) < 1e-12) ? true : false;
   FlowField difference;
   Real norm;
   SymmetryList symms(1);
   symms[0] = FieldSymmetry(1,1,1,0,0);
   if (symmstr.length() > 0){
     SymmetryList symms(symmstr);
     cout << "Analyzing flow in symmetric subspace" << endl;
     cout << symms <<endl;
   } 
   
   for(int i = 0; i < symms.length();i ++){
     string recnameI = recname+".csv";
     FILE* outfile = fopen(recnameI.c_str(),"w");
     
     for (Real t=T0; t<=T1; t+=dT){
       string ts =t2s(t,inttime);
       FlowField u(indir + label + ts);
       FlowField v(indir + label + t2s(dT+t,inttime));
       FlowField vsymm = symms[i](v);
       FlowField usymm = symms[i](u);
       norm = L2Dist(usymm,vsymm);
       fprintf(outfile,"%f",norm);
       cout << "Computing recurrence graph for t = "<<t<<endl;
       for(Real tp=2*dT; tp<=TRec; tp+=dT){
	 string tps= t2s(tp+t,inttime);
	 FlowField v(indir + label + tps);
	 FlowField vsymm = symms[i](v);
	 norm = L2Dist(usymm,vsymm);
	 fprintf(outfile,", ");
	 fprintf(outfile,"%f",norm);
       }
       fprintf(outfile,"\n");
     }
     fclose(outfile);
   }
     
}

